[
  {
    "id": "Game",
    "type": "Class",
    "source_file": "main.py",
    "label": "`Game` Class",
    "description_lines": [
      "Initializes Pygame, screen, clock.",
      "Manages game loop, event handling, updates, and rendering.",
      "Handles game over state and leaderboard interaction."
    ],
    "dependencies": [
      {"target": "pygame", "details": "for core game loop, event handling, display, timing, fonts"},
      {"target": "game.core.settings", "details": "for screen dimensions, FPS, colors, world/room config, UI elements, wave settings, and passed to `LeaderboardSprite`"},
      {"target": "game.entities.player.Player", "details": "creates and manages player instance"},
      {"target": "game.world.room.Room", "details": "creates and manages room instances"},
      {"target": "game.entities.npc.NPC", "details": "manages NPC group, NPCs created by `WaveManager`"},
      {"target": "game.entities.projectile.Projectile", "details": "indirectly via `Player.shoot()`"},
      {"target": "game.entities.grenade.Grenade", "details": "indirectly via `Player.shoot()` when grenade launcher is equipped"},
      {"target": "game.utils.effects.ExplosionEffect", "details": "indirectly via `Grenade.explode()`"},
      {"target": "game.systems.wave_manager.WaveManager", "details": "creates and manages wave manager instance"},
      {"target": "game.utils.effects.AttackVisual", "details": "indirectly via `NPC` or `WeaponSystem`"},
      {"target": "game.ui.leaderboard.Leaderboard", "details": "instantiates and uses for score management"},
      {"target": "game.ui.leaderboard_sprite.LeaderboardSprite", "details": "instantiates and uses for game over UI and leaderboard display"}
    ],
    "constructor_params": [
      "None directly, but initializes many components using values from `settings.py` or default values."
    ],
    "key_attributes": [
      "`screen: pygame.Surface` (initialized with `SCREEN_WIDTH`, `SCREEN_HEIGHT` from `settings.py`)",

      "`clock: pygame.time.Clock`",
      "`running: bool` (game loop control)",
      "`game_over: bool` (game state control)",
      "`rooms: list[Room]` (each `Room` initialized with `grid_x`, `grid_y`, `color` from `settings.ROOM_COLORS`)",

      "`player: Player` (initialized with `start_x`, `start_y` calculated from `ROOM_WIDTH`/`ROOM_HEIGHT`)",

      "`all_sprites: pygame.sprite.Group` (for player, NPCs, projectiles, attack visuals)",
      "`projectiles: pygame.sprite.Group`",
      "`npcs: pygame.sprite.Group`",
      "`wave_manager: WaveManager` (initialized with `self.all_sprites`, `self.npcs`, `self.player`)",

      "`camera_x: float`, `camera_y: float`",
      "`melee_attack_visuals: list`",
      "`font: pygame.font.Font` (e.g., `pygame.font.SysFont(None, 36)`)",

      "`game_over_font: pygame.font.Font`",
      "`restart_font: pygame.font.Font`",
      "`leaderboard_font_prompt: pygame.font.Font`",
      "`leaderboard_font_input: pygame.font.Font`",
      "`leaderboard_font_scores: pygame.font.Font`",

      "`leaderboard_manager: Leaderboard` (initialized with default `db_name`)",

      "`leaderboard_display: LeaderboardSprite` (initialized with `self.screen`, various fonts, `self.leaderboard_manager`, and the `settings` module)"
    ],
    "key_methods": [
      {"signature": "__init__()", "description": "Sets up game, player, rooms, camera, UI elements, `WaveManager`, `all_sprites` group, game over fonts, `Leaderboard` manager, and `LeaderboardSprite` display."},
      {
        "signature": "run()",
        "description": "Main game loop. Handles events, updates game state, and renders the screen. Manages game over sequence with `LeaderboardSprite`."
      },
      {"signature": "update_camera()", "description": "Adjusts camera based on player position."},
      {"signature": "draw_radar(), draw_status_bar(), draw_minimap()", "description": "UI rendering for main game state."},
      {"signature": "reset_game()", "description": "Resets the game state for a new session."}
    ],
    "raw_section_title": "Core Gameplay (`main.py`)"
  },
  {
    "id": "Player",
    "type": "Class",
    "source_file": "game/entities/player.py",
    "label": "`Player(Entity)` Class",
    "description_lines": [
      "Represents the player character."
    ],
    "dependencies": [
      {"target": "pygame", "details": "for sprite functionality, vector math, key handling"},
      {"target": "game.core.settings", "details": "for player stats (radius, speed, health), colors, world dimensions"},
      {"target": "game.core.entity.Entity", "details": "base class"},
      {"target": "game.utils.weapon.Weapon", "details": "holds current weapon instance"},
      {"target": "game.utils.weapon.WEAPON_DATA", "details": "for equipping weapons"},
      {"target": "game.entities.projectile.Projectile", "details": "used by WeaponSystem"},
      {"target": "game.entities.grenade.Grenade", "details": "used by WeaponSystem"}
    ],
    "constructor_params": [
      "`start_x: float` (initial world x-coordinate)",
      "`start_y: float` (initial world y-coordinate)",
      "`initial_weapon_key: str` (default: 'pistol', key from `WEAPON_DATA`)"
    ],
    "key_attributes": [
      "`radius: int` (from `settings.PLAYER_RADIUS`)",

      "`circle_color`, `arrow_color` (from `settings.py`)",

      "`health: int` (from `settings.PLAYER_HEALTH`)",

      "`speed: int` (from `settings.PLAYER_SPEED`)",

      "`kills: int` (tracks number of NPCs killed by the player, initialized to 0)",

      "`weapon: Weapon` (instantiated in `equip_weapon` based on `initial_weapon_key` and `WEAPON_DATA`)",

      "`direction: pygame.math.Vector2` (current facing direction)",

      "`last_shot_time: int`, `last_attack_time: int` (timestamps for cooldowns)",

      "`image: pygame.Surface` (visual representation of the player)",

      "`rect: pygame.Rect` (position and collision box in world coordinates, initialized with `start_x`, `start_y`, and `PLAYER_RADIUS`)"
    ],
    "key_methods": [
      {"signature": "__init__(start_x, start_y, initial_weapon_key='pistol')", "description": "Initializes player stats, image, position, initial weapon, `kills` count."},
      {"signature": "update()", "description": "Handles movement input, updates position, clamps to world boundaries, redraws image if direction changes."},
      {"signature": "shoot(projectiles_group, all_sprites_group, npcs_group=None)", "description": "Handles firing logic for ranged or grenade weapons."},
      {"signature": "melee_attack()", "description": "Performs melee attack, returns attack rectangle."},
      {"signature": "equip_weapon(weapon_key)", "description": "Switches player's weapon using `WEAPON_DATA`."},
      {"signature": "take_damage(amount)", "description": "Reduces player health."},
      {"signature": "increment_kills()", "description": "Increments the player's kill count."},
      {"signature": "_create_player_image()", "description": "Generates the player's visual surface."},
      {"signature": "get_melee_attack_rect()", "description": "Calculates melee attack area."}
    ],
    "raw_section_title": "Entities (`game/entities/player.py`)"
  },
  {
    "id": "Weapon",
    "type": "Class",
    "source_file": "game/utils/weapon.py",
    "label": "`Weapon` Class",
    "description_lines": [
      "Represents a weapon's attributes."
    ],
    "dependencies": [
      {"target": "game.core.settings", "details": "for default grenade properties if not in `WEAPON_DATA`"}
    ],
    "constructor_params": [
      "`name: str`",
      "`damage: int`",
      "`fire_rate: float` (seconds between shots/attacks)",
      "`type: str` ('ranged', 'melee', 'grenade')",
      "`**kwargs`: Other weapon-specific attributes (e.g., `projectile_speed`, `projectile_color`, `range`, `fuse_time`, `explosion_radius`)"
    ],
    "key_attributes": [
      "`name: str`",
      "`damage: int`",
      "`fire_rate: float`",
      "`type: str`",
      "Other dynamic attributes from `**kwargs` (e.g., `projectile_speed`, `projectile_color`, `range` for melee, `fuse_time`, `explosion_radius` for grenade launcher)."
    ],
    "key_methods": [],
    "raw_section_title": "Utilities (`game/utils/weapon.py`)"
  },
  {
    "id": "WEAPON_DATA",
    "type": "Dictionary",
    "source_file": "game/utils/weapon.py",
    "label": "`WEAPON_DATA` Dictionary",
    "description_lines": [
      "Defines attributes for all available weapons (e.g., \\\"pistol\\\", \\\"knife\\\", \\\"grenade_launcher\\\").",
      "\\\"grenade_launcher\\\" entry includes `type: \\\"grenade\\\"`, `fuse_time`, `explosion_radius`.",
      "\\\"knife\\\" entry includes `range` used for melee attack distance and visual, `damage`, `fire_rate`."
    ],
    "dependencies": [],
    "used_by": [
      {"target": "game.entities.player.Player.equip_weapon()", "details": null},
      {"target": "game.entities.npc.NPC.__init__()", "details": "to equip default knife"}
    ],
    "key_attributes": [],
    "key_methods": [],
    "raw_section_title": "Utilities (`game/utils/weapon.py`)"
  },
  {
    "id": "Projectile",
    "type": "Class",
    "source_file": "game/entities/projectile.py",
    "label": "`Projectile(pygame.sprite.Sprite)` Class",
    "description_lines": [
      "Base class for projectiles."
    ],
    "dependencies": [
      {"target": "pygame", "details": null},
      {"target": "game.core.settings", "details": "for default projectile size/color, `PROJECTILE_MAX_RANGE`"},
      {"target": "game.utils.weapon.Weapon", "details": "instance passed to constructor to get stats like speed, damage, color"}
    ],
    "constructor_params": [
      "`x: float` (initial world x-coordinate)",
      "`y: float` (initial world y-coordinate)",
      "`direction_vector: pygame.math.Vector2`",
      "`weapon_stats: Weapon` (instance of the weapon that fired it)"
    ],
    "key_attributes": [
      "`image: pygame.Surface`",
      "`rect: pygame.Rect`",
      "`direction: pygame.math.Vector2`",
      "`speed: float` (from `weapon_stats.projectile_speed`)",

      "`damage: int` (from `weapon_stats.damage`)",

      "`start_x: float`, `start_y: float` (for range calculation)"
    ],
    "key_methods": [
      {"signature": "__init__(x, y, direction_vector, weapon_stats)", "description": "Stores `start_x`, `start_y` for range calculation."},
      {"signature": "update()", "description": "Moves projectile, kills if off-screen or `PROJECTILE_MAX_RANGE` is exceeded."}
    ],
    "raw_section_title": "Entities (`game/entities/projectile.py`)"
  },
  {
    "id": "Grenade",
    "type": "Class",
    "source_file": "game/entities/grenade.py",
    "label": "`Grenade` Class",
    "description_lines": ["Represents a grenade entity with explosive capabilities."],
    "dependencies": [],
    "constructor_params": [],
    "key_attributes": [],
    "key_methods": [],
    "raw_section_title": "Game Entities (`game/entities/grenade.py`)"
  },
  {
    "id": "Room",
    "type": "Class",
    "source_file": "game/world/room.py",
    "label": "`Room` Class",
    "description_lines": ["Defines a game room or area, potentially managing its layout and contents."],
    "dependencies": [],
    "constructor_params": [],
    "key_attributes": [],
    "key_methods": [],
    "raw_section_title": "Game World (`game/world/room.py`)"
  },
  {
    "id": "WaveManager",
    "type": "Class",
    "source_file": "game/systems/wave_manager.py",
    "label": "`WaveManager` Class",
    "description_lines": ["Manages waves of NPCs, including spawning logic."],
    "dependencies": [],
    "constructor_params": [],
    "key_attributes": [
      "`npcs_to_spawn_this_wave: int`"
    ],
    "key_methods": [
      {"signature": "_get_spawn_location(player_rect)", "description": "Calculates a suitable spawn location for an NPC."}
    ],
    "raw_section_title": "Game Systems (`game/systems/wave_manager.py`)"
  },
  {
    "id": "Leaderboard",
    "type": "Class",
    "source_file": "game/ui/leaderboard.py",
    "label": "`Leaderboard` Class",
    "description_lines": [
      "Tracks and manages the leaderboard data."
    ],
    "dependencies": [
      {"target": "game.core.settings", "details": "for default database name and score display settings"},
      {"target": "game.utils.db.Database", "details": "for database operations (CRUD)"},
      {"target": "game.utils.score.Score", "details": "for score formatting and display"}
    ],
    "constructor_params": [
      "`db_name: str` (optional, defaults to `settings.DB_NAME`)"
    ],
    "key_attributes": [
      "`db_name: str`",
      "`database: Database` (initialized with `db_name`)",
      "`scores: list[tuple]` (fetched from database, each tuple contains `(rank, name, score)`)",
      "`font: pygame.font.Font` (for rendering text, e.g., `pygame.font.SysFont(None, 36)`)",

      "`input_box: pygame.Rect` (for player name input during game over)",
      "`input_active: bool` (controls input box visibility)",
      "`player_name: str` (stores player's name for leaderboard)"
    ],
    "key_methods": [
      {"signature": "__init__(db_name=settings.DB_NAME)", "description": "Initializes database connection and fetches scores."},
      {"signature": "fetch_scores()", "description": "Retrieves top scores from the database."},
      {"signature": "add_score(name, score)", "description": "Adds a new score entry to the database."},
      {"signature": "draw_scores(surface)", "description": "Renders the leaderboard scores on the given surface."},
      {"signature": "handle_input(events)", "description": "Manages player name input for the leaderboard."},
      {"signature": "reset_leaderboard()", "description": "Clears the leaderboard data in the database."}
    ],
    "raw_section_title": "UI (`game/ui/leaderboard.py`)"
  },
  {
    "id": "LeaderboardSprite",
    "type": "Class",
    "source_file": "game/ui/leaderboard_sprite.py",
    "label": "`LeaderboardSprite` Class",
    "description_lines": [
      "Displays the leaderboard using `Leaderboard` data."
    ],
    "dependencies": [
      {"target": "pygame", "details": "for sprite functionality"},
      {"target": "game.core.settings", "details": "for position, size, and color settings"},
      {"target": "game.ui.leaderboard.Leaderboard", "details": "for accessing leaderboard data"}
    ],
    "constructor_params": [
      "`surface: pygame.Surface` (where the sprite will be drawn)",
      "`font: pygame.font.Font` (for rendering text)",
      "`leaderboard: Leaderboard` (reference to the leaderboard data)",
      "`settings_module` (reference to the settings module for color and size constants)"
    ],
    "key_attributes": [
      "`surface: pygame.Surface`",
      "`font: pygame.font.Font`",
      "`leaderboard: Leaderboard`",
      "`settings_module`",
      "`background_color`, `border_color`, `text_color` (from `settings_module`)",
      "`position: pygame.Rect` (defining the area where the leaderboard is drawn)"
    ],
    "key_methods": [
      {"signature": "__init__(surface, font, leaderboard, settings_module)", "description": "Initializes colors, position, and size based on settings."},
      {"signature": "update()", "description": "Updates the sprite, fetching the latest scores if needed."},
      {"signature": "draw(surface)", "description": "Renders the leaderboard on the given surface."}
    ],
    "raw_section_title": "UI (`game/ui/leaderboard_sprite.py`)"
  }
]
